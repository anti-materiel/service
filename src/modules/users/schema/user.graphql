type User {
  id: ID!
  username: String!
  email: String!
  roles: [UserRole!]!
  active: Boolean
}

type PagedUsers {
  content: [User!]!
  limit: Int
  count: Int!
  page: Int!
  last: Boolean!
}

input UserRequest {
  username: String!
  email: String!
}

input UserAdminRequest {
  username: String!
  password: String
  email: String!
  roles: [UserRole!]!
}

input UserSearch {
  searchTerm: String
  username: String
  email: String
  role: UserRole
  active: Boolean
}

input ChangePasswordRequest {
  oldPassword: String!
  newPassword: String!
}

extend type Query {
  user: User
  userById(userId: ID!): User! @auth(requires: USER_ADMIN)
  userList(search: UserSearch, page: Int, limit: Int): PagedUsers! @auth(requires: USER_ADMIN)
}

extend type Mutation {
  createUser(request: UserRequest!): Boolean
  adminCreateUser(request: UserAdminRequest!): User! @auth(requires: USER_ADMIN)
  resetPasswordRequest(email: String!): Boolean
  resetPassword(resetId: String!, password: String!): User!
  changePassword(request: ChangePasswordRequest!): Boolean @auth
  updateUser(userId: ID!, request: UserAdminRequest!, logUserOut: Boolean = false): User @auth(requires: USER_ADMIN)
  removeUser(userId: ID!): ID @auth(requires: USER_ADMIN)
  remove: ID @auth
  disableUser(userId: ID!): ID @auth(requires: USER_ADMIN)
  enableUser(userId: ID!): ID @auth(requires: USER_ADMIN)
  forceLogoutUser(userId: ID!): ID @auth(requires: USER_ADMIN)
}